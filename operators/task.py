# string = ('123456')
# if len(string) != 6 or not string.isdigit():
#     print('Должно быть минимум 6 символов и должны быть только цифры!')
# else:
#     digits = [int(c) for c in string]

# first_sum = digits[0] + digits[1] + digits[2]
# second_sum = digits[3] + digits[4] + digits[5]

# if first_sum == second_sum:
#         print('да')
# else:
#         print('нет')


'''

Задание 20
У треугольника сумма любых двух сторон должна быть больше третьей. Иначе две стороны просто "лягут"
 на третью и треугольник не получится.
Запросите у пользователя длины трех сторон. Программа должна определять, 
может ли существовать треугольник при таких длинах. Если да, то напечатать 'yes', нет - 'no'
'''


# a = int(input()) 
# b = int(input()) 
# c = int(input()) 
# if a + b > c and a + c > b and b + c > a: 
#     print("yes") 
# else: 
#     print("no")






# a = int(input()) 
# # b = int(input()) 
# # c = int(input()) 
# # if a + b > c and a + c > b and b + c > a: 
#     print("yes") 
# else: 
#     print("no")









# try:
#     num1 = float(input("Введите первое число: "))
#     num2 = float(input("Введите второе число: "))
#     result = num1 + num2
#     print("Сумма чисел:", result)
# except ValueError:
#     print("Введите число!")






# def divide(num1, num2):
#     return num1 / num2
# result = divide(10, 2)
# print(result)





"""
1) Создайте список list_ из нечётных целых чисел в промежутке от 1 до 50. Нужно использовать comprehension.
"""
# list_ = [i for i in range(1, 51) if i % 2 != 0]
# print(list_)
"""
2) Создайте список list_ из квадратов всех чисел от 1 до 25 (включительно). Нужно использовать comprehension.
"""
# list_ = [num ** 2 for num in range(1, 26)]
# print(list_)
"""
3) Опишите полный синтаксис конструкции try-except
"""

"""
4) Напишите программу, которая будет получать через input 2 числа num1, num2 и будет печатать их сумму.
Обработайте ошибку, которая возникнет, если пользователь введёт что-то кроме числа и выведите сообщение, например:
Введите число!
"""

# try:
#     num1 = float(input("Введите первое число: "))
#     num2 = float(input("Введите второе число: "))
#     result = num1 + num2
#     print("Сумма чисел:", result)
# except ValueError:
#     print("Введите число!")
"""
5)
"""
# def divide(a, b):
#     return a / b
# result = divide(10, 2)
# print(result)  
"""
6) Создайте функцию:

is_palindrome() 
которая будет принимать строку и проверить является ли она палиндромом.

Палиндро́м, пе́ревертень — число, буквосочетание, слово или текст, одинаково читающееся в обоих направлениях. Например, число 101; слова "кок", "топот", "комок" и т.д.

Функция должна возвращать True или False. Нужно учитывать пробелы и регистр 

"""
#def new_func():
#a1, b1, c1 = int(input()), int(input()), int(input())
#c = max(a1, b1, c1)
#b = min(a1, b1, c1)
#a = sum([a1, b1, c1]) - min(a1, b1, c1) - max(a1, b1, c1)
#if c >= a + b:
#    print('impossible')
#elif c**2 == a**2 + b**2:
#    print('rectangular')
#elif c**2 < a**2 + b**2:
 #   print('acute')
#elif c**2 > a**2 + b**2:
    #print('obtuse')

    #new_func()


# Задание 10
# Используя функцию range() создайте список list_ из 20 произвольных чисел.
# Распечатайте результат
# Примерный вывод:

# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19] 

# list_ = list(range(1, 21))
# print(list_)


# Задание 11
# При помощи функции range() создайте список list_ из чётных чисел от 0 до 100 (включительно).
# Распечатайте результат.
# Примерный вывод:
# [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48,
#   50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100] 

# list_ = list(range(0, 101, 4))
# print(list_)

# Задание 12
# Создайте два списка list1, list2 со случайным набором чисел.
# Объедините эти списки.
# Затем, выведите сумму всех чисел в консоль.
# К примеру, если в перемнных хранятся такие списки:

# [11, 23, 45, 7, 9] 
# [21, 4, 16, 8, 10] 
# Объединив их и распечатав сумму всех чисел, получим:

# 154 

# list1 = [1, 4, 8]
# list2 = [78, 11, 9]
# print(sum(list1 + list2))

# Задание 13
# Написать программу, которая будет принимать от пользователя числа через запятую, без пробелов.
# числа поместить в список list_ и вывести в отсортированном виде.
# Числа переданные во вкладке INPUT сохраняются в строковом типе данных.

# Поэтому, к примеру, для чисел 15,364,27,2 отсортированный список будет выглядеть так:

# ['15', '2', '27', '364'] 

# Задание 14
# Создать три числа в списке list_.
# Вывести на экран yes, если среди них есть одинаковые, иначе вывести ERROR.
# Например, для списка [1, 1, 3], вывод будет:

# yes 
# а для списка [1, 2, 3]:

# ERROR 

# list_ = [1,1,3] 
# set_ = set(list_) 
# if len(set_) != len(list_): 
#     print('yes') 
# else: 
#     print('ERROR')



# Задание 15
# Записать в список list_ все числа в промежутке от 54 до 9184 делящиеся на 5 без остатка.
# Распечатайте результат.
# Вывод должен быть:

# [55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 1
#  30, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200
#  , 205, 210, 215, 220, 225, 230, 235, 240, 24
#  5, 250, 255, ... ... ... ... ...  ... ... ... ... ... ... , 9125, 9130, 9135
#  , 9140, 9145, 9150, 9155, 9160, 9165, 9170, 9175, 9180] 


# list_ = []
# for x in range(54, 9184):
#     if x % 5 == 0:
#         list_.append(x)
# print(list_)


# Задание 16
# Дан список целых чисел, найдите минимальное значение, не используя встренную функцию min().
# Например:

# list_ = [20, 10, 20, 1, 100]
# Результат:

# min_number = 1


# Задание 18
# Запросите у пользователей 5 раз их имя и фамилию, но в списке сохраните лишь фамилию, 
# также учтите, что у человека ФИО может состоять не только из 2 слов.
# При выводе должен выходить отсортированный в алфавитном порядке список




# Задание 19
# Вам дан список из чисел, и переменная x в которой хранится число, посчитайте сколько вхождений этого числа в этом списке
# Например:

# list_ = [8, 6, 8, 10, 8, 20, 10, 8, 8]
# number = 8



# Задание 18
# Запросите у пользователей 5 раз их имя и фамилию, но в списке сохраните лишь фамилию, также 
# учтите, что у человека ФИО может состоять не только из 2 слов.
# При выводе должен выходить отсортированный в алфавитном порядке список
